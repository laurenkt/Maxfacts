{{define "content"}}
<div class="directory-browser -depth-{{.Depth}}">
	{{- range $index, $column := .Directory}}
	<nav class="-index-{{$index}}">
		<ul>
			{{- range .}}
				<li><a href="/{{.URI}}" class="{{.Type}} {{lookup $.Selected .URI}}">
					{{- if .Surtitle}}
						<span class="surtitle">{{.Surtitle}}</span>
					{{- end}}
					{{.Title}}
					{{- if .Description}}
						<span class="subtitle">{{.Description}}</span>
					{{- end}}
				</a></li>
				{{- if .Sublist}}
					{{- range .Sublist}}
						<li><a href="/{{.URI}}" class="sublist {{.Type}}">{{.Title}}</a></li>
					{{- end}}
				{{- end}}
			{{- end}}
		</ul>
	</nav>
	{{- end}}
	<section id="floating-preamble">
		<h3>{{.Title}}</h3>
		{{- if .Body}}
			{{shift_headers 3 .Body}}
		{{- else}}
			<p>This section has no content yet.</p>
		{{- end}}{{template "next-section" (dict "NextPage" .NextPage "FurtherReading" .FurtherReading "Class" "-short")}}
	</section>
</div>
<style>
	#floating-preamble {
		transition-property: padding-top;
		transition-duration: 0s;
	}
</style>
<script>
	// Main content area to reposition
	var preamble = document.getElementById("floating-preamble")
	// Track the current padding to make calculating inner height easier
	var current_padding = 0
	// If using smaller responsive layout, don't reposition (this tracks this)
	var should_reposition = true
	// Sometimes extra elements need to be moved, like other nav bars
	var elements_to_adjust = [preamble]

	// When in a display: table, cells have the 'height' of the container
	// Need to find the real height instead
	function get_real_height(el) {
		return el.lastElementChild.getBoundingClientRect().bottom - el.getBoundingClientRect().top
	}

	// Gets the largest nav column height
	// Also adds any nav columns after this to elements_to_adjust
	// Also determines whether the layout is too small to need
	// adjusting
	function get_max_nav_height() {
		should_reposition = true
		var navs = document.getElementsByTagName('nav')
		var max = 0

		for (var i = 0; i < navs.length; i++) {
			// If any navs are hidden it means layout is in small-mode
			if (navs[i].offsetParent === null)
				should_reposition = false

			var height = get_real_height(navs[i])

			// Whether to adjust size of columsn following the largest
			if (height >= max)
				elements_to_adjust = [preamble]
			else
				elements_to_adjust.push(navs[i])

			max = Math.max(max, height)
		}

		return max
	}

	// Call this to reposition content
	function adjust_height(_) {
		// These will need to be compared to calculate new position
		var viewport_height = document.documentElement.clientHeight || window.innerHeight
		var scroll_top      = document.documentElement.scrollTop || document.body.scrollTop
		var preamble_top    = preamble.getBoundingClientRect().top + scroll_top

		// Simplest way to calculate inner height
		var preamble_height = get_real_height(preamble) - current_padding

		var nav_height = get_max_nav_height()

		console.log('preamble_top', preamble_top)

		current_padding = Math.max(
			0,
			// Recommended position - compensation if viewport is smaller than preamble
			Math.min(scroll_top - preamble_top, nav_height - preamble_height)
			//Math.min(nav_height - preamble_height, scroll_top - preamble_top) - Math.max(0, preamble_height - viewport_height)
		)

		// Adjust CSS property directly
		if (!should_reposition)
			current_padding = 0

		for (var i = 0; i < elements_to_adjust.length; i++) {
			elements_to_adjust[i].style['padding-top'] = current_padding + 'px'
		}
	}

	// When to adjust position
	document.addEventListener("scroll",     adjust_height)
	document.addEventListener("mousewheel", adjust_height)
	document.addEventListener("resize",     adjust_height)
</script>
{{end}}